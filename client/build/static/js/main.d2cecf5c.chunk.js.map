{"version":3,"sources":["components/EditPost.js","components/Post.js","components/PostMap.js","components/AddPost.js","components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["EditPost","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","defineProperty","target","name","value","handleSubmit","preventDefault","id","post","postHold","title","state","curTitle","contents","curContent","editPost","modal","toggle","bind","assertThisInitialized","_this2","react_default","a","createElement","className","Button","color","onClick","Modal","isOpen","Form","onSubmit","FormGroup","Input","required","onChange","type","placeholder","Component","Post","handleDelete","deletePost","Axios","delete","concat","then","res","aRefresh","catch","err","console","log","response","EditPost_EditPost","PostMap","posts","map","Post_Post","key","Number","Date","now","AddPost","addPost","PostList","getPosts","get","data","newPost","cPost","put","initialized","prevProps","prevState","length","AddPost_AddPost","App","connectToServer","fetch","PostList_PostList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2cecf5c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Input, Button, FormGroup, Modal } from 'reactstrap';\n\nexport default class EditPost extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      curTitle: this.props.post.title,\n      curContent: this.props.post.contents,\n      modal: false\n    }\n\n    this.toggle = this.toggle.bind(this);\n  }\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    let id = this.props.post.id;\n    let postHold = {\n      title: this.state.curTitle,\n      contents: this.state.curContent,\n    }\n    this.props.editPost(postHold, id);\n    this.setState({\n      modal: false\n    })\n  }\n\n  \n  toggle() {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"addFriendDiv\">\n        <Button color=\"primary\" onClick={this.toggle}>Edit Post</Button>\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n        <Form onSubmit={e => this.handleSubmit(e)}>\n          <FormGroup>\n            <Input required onChange={this.handleChange} type=\"text\" placeholder=\"Title\" name=\"curTitle\" value={this.state.curTitle} />\n            <Input required onChange={this.handleChange} type=\"textarea\" placeholder=\"Content\" name=\"curContent\" value={this.state.curContent} />\n          </FormGroup>\n          <Button>Submit</Button>\n        </Form>\n        </Modal>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport Axios from 'axios';\nimport EditPost from './EditPost';\nimport { Button } from 'reactstrap';\nexport default class Post extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            title: this.props.post.title,\n            contents: this.props.post.contents,\n            id: this.props.post.id\n        }\n    }\n\n    handleDelete = () => {\n        this.deletePost(this.state.id)\n    }\n\n    deletePost = (id) => {\n        Axios.delete(`http://localhost:4000/api/posts/${id}`)\n        .then((res) => this.props.aRefresh())\n        .catch(err => console.log(err.response));\n        this.props.aRefresh();\n    }\n\n  render() {\n    return (\n      <div className=\"aPost\">\n        <h2>\n            {this.state.title}\n        </h2>\n        <p>\n            {this.state.contents}\n        </p>\n        <div className=\"editDelete\">\n        <EditPost post={this.props.post} \n                  editPost={this.props.editPost} />\n        <Button color=\"danger\" onClick={() => this.deletePost(this.props.post.id)} >DELETE</Button></div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport Post from './Post';\n\nexport default function PostMap(props) {\n  return (\n    <div>\n      {props.posts.map(post => (\n          <Post post={post} \n                key={Number(post.id+Date.now())} \n                aRefresh={props.aRefresh}\n                editPost={props.editPost} />\n      ))}\n    </div>\n  )\n}\n","import React, { Component } from 'react';\nimport { Form, Input, Button, FormGroup, Modal } from 'reactstrap';\n\nexport default class AddPost extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      curTitle: '',\n      curContent: '',\n      modal: false\n    }\n\n    this.toggle = this.toggle.bind(this);\n  }\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    let postHold = {\n      title: this.state.curTitle,\n      contents: this.state.curContent,\n    }\n    this.props.addPost(postHold);\n    this.setState({\n      curTitle: '',\n      curContent: '',\n      modal: false\n    })\n  }\n\n  \n  toggle() {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"addFriendDiv\">\n        <Button color=\"primary\" onClick={this.toggle}>Add Post</Button>\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n        <Form onSubmit={e => this.handleSubmit(e)}>\n          <FormGroup>\n            <Input required onChange={this.handleChange} type=\"text\" placeholder=\"Title\" name=\"curTitle\" value={this.state.curTitle} />\n            <Input required onChange={this.handleChange} type=\"textarea\" placeholder=\"Content\" name=\"curContent\" value={this.state.curContent} />\n          </FormGroup>\n          <Button>Submit</Button>\n        </Form>\n        </Modal>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport Axios from \"axios\";\nimport PostMap from './PostMap';\nimport AddPost from './AddPost';\n\nexport default class PostList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n          initialized: false,\n          posts: []\n        }\n    }\n\n    componentDidMount() {\n      if(!this.state.initialized){\n      this.getPosts();\n      console.log(\"posts mount\")\n      }\n      this.setState({\n        initialized: true\n      })\n    }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.posts.length !== this.state.posts.length) {\n      this.getPosts();\n    } else {\n      console.log('empty update')\n    }\n  }\n\n    aRefresh = () => {\n      this.getPosts();\n      console.log('REFRESHED')\n    }\n\n\n    getPosts = () => {\n      Axios\n      .get(\n          'http://localhost:4000/api/posts'\n      )\n      .then(res => {\n        this.setState({\n          posts: res.data\n        })\n      } )\n      .catch(err => console.log('error fetching'));\n      console.log('Posts fetched')\n    }\n\n    addPost = (newPost) => {\n      Axios\n        .post(`http://localhost:4000/api/posts/`, newPost)\n        .then(res => this.aRefresh())\n        .catch(err => console.log(err));\n    }\n\n    editPost = (cPost, id) => {\n      Axios\n          .put(`http://localhost:4000/api/posts/${id}`, cPost)\n          .then(res => this.aRefresh())\n          .catch(err => {\n              console.log(err);\n          })\n    }\n\n  render() {\n    console.log(this.state.posts)\n    return (\n      <div>\n        <AddPost addPost={this.addPost} />\n        <PostMap posts={this.state.posts} \n                 aRefresh={this.aRefresh}\n                 editPost={this.editPost} />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport PostList from './components/PostList';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.connectToServer = this.connectToServer.bind(this);\n  }\n\n  connectToServer() {\n    fetch('/');\n  }\n\n  componentDidMount() {\n    this.connectToServer();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <h1>Posts</h1>\n            <PostList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}